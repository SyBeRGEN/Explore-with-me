{
	"info": {
		"_postman_id": "16c83cbe-2f44-449e-8eee-36f92fe187c5",
		"name": "Test feature - comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25524134"
	},
	"item": [
		{
			"name": "getAllWithParams",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    text: 'Random_text',\r",
							"                    create: '2023-08-11 19:06:11',\r",
							"                    eventId: pm.environment.get('eventId'),\r",
							"                    commentatorId: pm.environment.get('userId')\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"        await createComment();\r",
							"        await createComment();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Код состояния ответа равен 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ответ получен в виде листа\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Каждый объект в массиве ответов имеет обязательные поля\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (comment) {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('text');\r",
							"        pm.expect(comment).to.have.property('created');\r",
							"        pm.expect(comment).to.have.property('eventId');\r",
							"        pm.expect(comment).to.have.property('commentatorId');\r",
							"        pm.expect(comment).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Каждый идентификатор в массиве ответов является неотрицательным целым числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (comment) {\r",
							"        pm.expect(comment.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Каждый текст в массиве ответов является непустой строкой\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(function (comment) {\r",
							"        pm.expect(comment.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Массив ответов содержит ровно 2 элемента\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.lengthOf(2, \"The response array should have exactly 2 elements\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:8080/admin/comments/?text=rand&rangeStart=2021-08-11 17:56:47&rangeEnd=2031-08-11 17:56:47&status=PENDING&from=0&events={{eventId}}",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						""
					],
					"query": [
						{
							"key": "text",
							"value": "rand"
						},
						{
							"key": "rangeStart",
							"value": "2021-08-11 17:56:47"
						},
						{
							"key": "rangeEnd",
							"value": "2031-08-11 17:56:47"
						},
						{
							"key": "status",
							"value": "PENDING"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1",
							"disabled": true
						},
						{
							"key": "events",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса ответа - 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поле id является неотрицательным целым числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Убедитесь, что текстовое поле является непустой строкой\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поле EventID является неотрицательным целым числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.eventId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поле commentator Id является неотрицательным целым числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.commentatorId).to.be.a('number');\r",
							"    pm.expect(responseData.commentatorId).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поле status является одним из ожидаемых значений\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.oneOf([\"REJECTED\", \"CONFIRMED\", \"PENDING\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ответ содержит все обязательные поля\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.text).to.exist;\r",
							"    pm.expect(responseData.created).to.exist;\r",
							"    pm.expect(responseData.eventId).to.exist;\r",
							"    pm.expect(responseData.commentatorId).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Текстовое поле должно представлять собой непустую строку\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поле EventID является неотрицательным целым числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.eventId).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.eventId).to.be.at.least(0, \"Value should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"text_xdska\",\r\n  \"created\": \"2023-08-11 19:06:11\",\r\n  \"eventId\": {{eventId}},\r\n  \"commentatorId\": {{userId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/{{userId}}/comments/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"{{userId}}",
						"comments",
						""
					],
					"query": [
						{
							"key": "text",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "patchComment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    text: 'Random_text',\r",
							"                    create: '2023-08-11 19:06:11',\r",
							"                    eventId: pm.environment.get('eventId'),\r",
							"                    commentatorId: pm.environment.get('userId')\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"        await createComment();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса ответа - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Поле status должно быть CONFIRMED\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.equal(\"CONFIRMED\");\r",
							"});\r",
							"\r",
							"pm.test(\"Поле id должно быть числом и иметь положительное значение\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Поле text должно быть непустой строкой\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Строка text пустая\");\r",
							"});\r",
							"\r",
							"pm.test(\"Поле created должно быть непустой строкой\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.created).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Строка created пустая\");\r",
							"});\r",
							"\r",
							"pm.test(\"Поле eventId должно быть числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.eventId).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Поле commentatorId должно быть числом\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.commentatorId).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"CONFIRMED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/admin/comments/{{commentId}}"
			},
			"response": []
		},
		{
			"name": "updateComment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    text: 'Random_text',\r",
							"                    create: '2023-08-11 19:06:11',\r",
							"                    eventId: pm.environment.get('eventId'),\r",
							"                    commentatorId: pm.environment.get('userId')\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"        await createComment();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа равен 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Поле text равно 'edited_text'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.text).to.eql('edited_text');\r",
							"});\r",
							"\r",
							"pm.test(\"Поле status имеет статус 'REJECTED'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql('REJECTED');\r",
							"});\r",
							"\r",
							"pm.test(\"Не менее 6 полей в полученном списке\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData).length).to.be.at.least(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{commentId}},\r\n  \"text\": \"edited_text\",\r\n  \"created\": \"2023-08-12 13:41:09\",\r\n  \"eventId\": {{eventId}},\r\n  \"commentatorId\": {{userId}},\r\n  \"status\": \"REJECTED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/admin/comments/"
			},
			"response": []
		},
		{
			"name": "deleteCommentAndGetCommentByUserId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    text: 'Random_text',\r",
							"                    create: '2023-08-11 19:06:11',\r",
							"                    eventId: pm.environment.get('eventId'),\r",
							"                    commentatorId: pm.environment.get('userId')\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function deleteComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments/${pm.environment.get('commentId')}`,\r",
							"            method: 'DELETE',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({})\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"        await createComment();\r",
							"        deleteComment();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100\r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен быть в виде списка\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Список в ответе должен быть пустым\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://localhost:8080/users/{{userId}}/comments/"
			},
			"response": []
		},
		{
			"name": "getAllByPublicApi",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomEmailPrefix() {\r",
							"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let emailPrefix = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        emailPrefix += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return emailPrefix;\r",
							"}\r",
							"\r",
							"function generateRandomRussianName() {\r",
							"    const russianLetters = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';\r",
							"    const nameLength = Math.floor(Math.random() * 10) + 1;\r",
							"    let randomName = '';\r",
							"    for (let i = 0; i < nameLength; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * russianLetters.length);\r",
							"        randomName += russianLetters.charAt(randomIndex);\r",
							"    }\r",
							"    return randomName;\r",
							"}\r",
							"\r",
							"const randomName = generateRandomRussianName();\r",
							"\r",
							"const randomEmailPrefix = generateRandomEmailPrefix();\r",
							"const domain = 'example.com';\r",
							"const randomEmail = `${randomEmailPrefix}@${domain}`;\r",
							"\r",
							"async function createCategory() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/categories',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: randomName\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:8080/admin/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    email: randomEmail,\r",
							"                    name: 'Dmitry StrongApiTester'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('userId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"async function createEvent() {\r",
							"    const requestBody = {\r",
							"        annotation: 'annotation_9zy03asdasd',\r",
							"        category: pm.environment.get('categoryId'),\r",
							"        description: 'description_ek8x3фывфыв',\r",
							"        eventDate: '2024-08-11 18:25:23',\r",
							"        location: {\r",
							"            lat: 1.0,\r",
							"            lon: 1.0\r",
							"        },\r",
							"        paid: true,\r",
							"        participantLimit: 1,\r",
							"        requestModeration: true,\r",
							"        title: 'title_eosl8asdasd'\r",
							"    };\r",
							"\r",
							"    const userId = pm.environment.get('userId');\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${userId}/events`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify(requestBody)\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('eventId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchEvent() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/events/${pm.environment.get('eventId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    stateAction: 'PUBLISH_EVENT'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('categoryId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function createComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/users/${pm.environment.get('userId')}/comments`,\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    text: 'Random_text',\r",
							"                    create: '2023-08-11 19:06:11',\r",
							"                    eventId: pm.environment.get('eventId'),\r",
							"                    commentatorId: pm.environment.get('userId')\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function patchComment() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: `http://localhost:8080/admin/comments/${pm.environment.get('commentId')}`,\r",
							"            method: 'PATCH',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    status: 'CONFIRMED'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                pm.environment.set('commentId', res.json().id);\r",
							"                console.log(res.json());\r",
							"                resolve();\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"async function executeRequests() {\r",
							"    try {\r",
							"        await createUser();\r",
							"        await createCategory();\r",
							"        await createEvent();\r",
							"        await patchEvent();\r",
							"        await createComment();\r",
							"        await patchComment();\r",
							"        await createComment();\r",
							"        await createComment();\r",
							"        await patchComment();\r",
							"    } catch (error) {\r",
							"        console.error(error);\r",
							"    }\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await executeRequests();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ состоит из списка и количество элементов - 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    pm.expect(jsonData).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test(\"id элемента 1 и id элемента 2 отличаются на 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var id1 = Math.abs(jsonData[0].id);\r",
							"    var id2 = Math.abs(jsonData[1].id);\r",
							"    pm.expect(id2 - id1).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"status обоих элементов 'CONFIRMED'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (item) {\r",
							"        pm.expect(item.status).to.eql('CONFIRMED');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments?text=ran&events={{eventId}}&rangeStart=2021-08-11 17:56:47&rangeEnd=2031-08-11 17:56:47&size=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "ran"
						},
						{
							"key": "events",
							"value": "{{eventId}}"
						},
						{
							"key": "rangeStart",
							"value": "2021-08-11 17:56:47"
						},
						{
							"key": "rangeEnd",
							"value": "2031-08-11 17:56:47"
						},
						{
							"key": "from",
							"value": "1",
							"disabled": true
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "123"
		},
		{
			"key": "eventId",
			"value": "123"
		},
		{
			"key": "commentId",
			"value": "123"
		}
	]
}